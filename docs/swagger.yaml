basePath: /
definitions:
  admin.AddProductRequest:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  admin.AdminOrderResponse:
    properties:
      buyer:
        $ref: '#/definitions/admin.OrderBuyerResponse'
      items:
        items:
          $ref: '#/definitions/admin.OrderItemResponse'
        type: array
      order_id:
        example: 1
        type: integer
      status:
        example: completed
        type: string
      total_amount:
        example: 75.5
        type: number
    type: object
  admin.ErrorResponse:
    properties:
      error:
        example: Invalid input
        type: string
    type: object
  admin.OrderBuyerResponse:
    properties:
      email:
        example: buyer@example.com
        type: string
      id:
        example: 1
        type: integer
      phone:
        example: "123456789"
        type: string
    type: object
  admin.OrderItemResponse:
    properties:
      price:
        example: 25
        type: number
      product_name:
        example: Product A
        type: string
      quantity:
        example: 2
        type: integer
    type: object
  admin.PaginatedAdminOrdersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/admin.AdminOrderResponse'
        type: array
      isNext:
        example: true
        type: boolean
      isPrev:
        example: false
        type: boolean
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      totalItem:
        example: 50
        type: integer
    type: object
  admin.SignInRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  admin.SignInResponse:
    properties:
      token:
        example: your_jwt_token
        type: string
    type: object
  helper.ErrorDetail:
    properties:
      code:
        description: HTTP status code
        type: integer
      message:
        items:
          type: string
        type: array
    type: object
  helper.ErrorResponse:
    properties:
      error:
        allOf:
        - $ref: '#/definitions/helper.ErrorDetail'
        description: Error details
    type: object
  helper.SuccessResponse:
    properties:
      data:
        description: Response data (optional)
      message:
        description: Description of the operation
        type: string
    type: object
  user.AddToCartRequest:
    properties:
      product_id:
        description: ID of the product
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  user.CreateUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  user.OrderItemResponse:
    properties:
      price:
        example: 25
        type: number
      product_name:
        example: Product A
        type: string
      quantity:
        example: 2
        type: integer
    type: object
  user.OrderResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/user.OrderItemResponse'
        type: array
      order_id:
        example: 1
        type: integer
      status:
        example: completed
        type: string
      total_amount:
        example: 75.5
        type: number
    type: object
  user.PaginatedOrdersResponse:
    properties:
      data:
        description: List of orders
        items:
          $ref: '#/definitions/user.OrderResponse'
        type: array
      isNext:
        description: Whether there is a next page
        example: true
        type: boolean
      isPrev:
        description: Whether there is a previous page
        example: false
        type: boolean
      limit:
        description: Number of items per page
        example: 10
        type: integer
      page:
        description: Current page number
        example: 1
        type: integer
      totalItem:
        description: Total number of items
        example: 25
        type: integer
    type: object
  user.Product:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  user.SignInRequest:
    properties:
      email:
        example: user1@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  user.SignInResponse:
    properties:
      token:
        example: your_jwt_token
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Deketna business application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Deketna API
  version: "1.0"
paths:
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all orders with buyer details
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by order status (e.g., pending, completed, cancelled)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of all orders with details
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/admin.PaginatedAdminOrdersResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Admin View Orders
      tags:
      - Admin Orders
  /admin/orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Admin can update the status of an order (accept, reject, ontheway,
        finish)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: New order status (accept, reject, ontheway, finish)
        in: body
        name: status
        required: true
        schema:
          properties:
            status:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  properties:
                    order_id:
                      type: integer
                    status:
                      type: string
                  type: object
              type: object
        "400":
          description: 'Bad Request: Invalid status or order not found'
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Order Status
      tags:
      - Admin Orders
  /admin/product:
    post:
      consumes:
      - application/json
      description: Admin adds a new product
      parameters:
      - description: Product details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/admin.AddProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product added
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add a product
      tags:
      - Admin Product
  /admin/signin:
    post:
      consumes:
      - application/json
      description: Authenticates as admin  with email and password
      parameters:
      - description: Admin sign-in data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/admin.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/admin.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/admin.ErrorResponse'
      summary: Sign in a admin
      tags:
      - Admin Auth
  /cart/{id}:
    post:
      consumes:
      - application/json
      description: Add a product with a specific quantity to the buyer's cart
      parameters:
      - description: Product ID and Quantity
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/user.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product added to cart successfully
          schema:
            $ref: '#/definitions/helper.SuccessResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Product to Cart
      tags:
      - Products
  /order:
    post:
      consumes:
      - application/json
      description: Create a new order from the buyer's cart, validate stock, deduct
        quantities, and clear the cart
      produces:
      - application/json
      responses:
        "200":
          description: Order placed successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  properties:
                    order_id:
                      type: integer
                    total_amount:
                      type: number
                  type: object
              type: object
        "400":
          description: 'Bad Request: Cart is empty or insufficient stock'
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Place Order
      tags:
      - User Orders
  /orders:
    get:
      consumes:
      - application/json
      description: Retrieve a list of orders placed by the authenticated buyer
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of orders with details
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/user.PaginatedOrdersResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Orders
      tags:
      - User Orders
  /product/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information of a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/user.Product'
              type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Get Product Detail
      tags:
      - Products
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products available for users
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/user.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Get Products
      tags:
      - Products
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User Created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/user.SignInResponse'
              type: object
        "400":
          description: 'Bad Request: Invalid input/Email is already registered'
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Register a new user
      tags:
      - User Auth
  /signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password
      parameters:
      - description: User sign-in data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User Login successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/user.SignInResponse'
              type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Sign in a user (buyer)
      tags:
      - User Auth
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer <token>" (e.g., "Bearer abc123") as the value.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
