basePath: /
definitions:
  admin.AddProductRequest:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  admin.ErrorResponse:
    properties:
      error:
        example: Invalid input
        type: string
    type: object
  admin.SignInRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  admin.SignInResponse:
    properties:
      token:
        example: your_jwt_token
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  user.CreateUserResponse:
    properties:
      token:
        example: your_jwt_token
        type: string
    type: object
  user.ErrorResponse:
    properties:
      error:
        example: Invalid input
        type: string
    type: object
  user.SignInRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  user.SignInResponse:
    properties:
      token:
        example: your_jwt_token
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Deketna business application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Deketna API
  version: "1.0"
paths:
  /admin/product:
    post:
      consumes:
      - application/json
      description: Admin adds a new product
      parameters:
      - description: Product details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/admin.AddProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product added
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add a product
      tags:
      - Admin Product
  /admin/signin:
    post:
      consumes:
      - application/json
      description: Authenticates as admin  with email and password
      parameters:
      - description: Admin sign-in data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/admin.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/admin.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/admin.ErrorResponse'
      summary: Sign in a admin
      tags:
      - Admin Auth
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Register a new user
      tags:
      - User Auth
  /user/signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password
      parameters:
      - description: User sign-in data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Sign in a user (buyer)
      tags:
      - User Auth
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer <token>" (e.g., "Bearer abc123") as the value.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
